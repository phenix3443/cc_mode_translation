# -*- coding:utf-8 -*-
#+author:刘尚亮
#+email:phenix3443@gmail.com

* Getting Started

  If you got this version of CC Mode with Emacs or XEmacs, it should work just fine right out of the box. Note however that you might not have the latest CC Mode release and might want to upgrade your copy (see below).

  如果伴随 Emacs 或 XEmacs 有该版本，它应该是开箱开用的。然而，如果可能没有最新版本的 CC Mode 发布版，想要升级你的副本（见下文）。

  You should probably start by skimming through the entire Commands chapter (see Commands) to get an overview of CC Mode’s capabilities.

  应该首先浏览整个 Commands 章（参见 Commands）获取有关 CC Mode 能力的整体概述。

  After trying out some commands, you may dislike some aspects of CC Mode’s default configuration. Here is an outline of how to change some of the settings that newcomers to CC Mode most often want to change:

  尝试一些命令后，你可能不喜欢 CC Mode 某些方面的默认配置。以下大纲针对 CC Mode 新手通常想要改变的设置进行说明：

  + *c-basic-offset*

	This Lisp variable holds an integer, the number of columns CC Mode indents nested code. To set this value to 6, customize c-basic-offset or put this into your .emacs:

	该 Lisp 变量包含的整数指定 CC Mode 缩进嵌套代码列数。通过自定 c-basic-offset 或将下面的代码写入.emacs 中将改制设置为 6。

	#+BEGIN_SRC elisp
(setq c-basic-offset 6)
	#+END_SRC
  + *The (indentation) style*

	The basic “shape” of indentation created by CC Mode—by default, this is gnu style (except for Java and AWK buffers). A list of the available styles and their descriptions can be found in Built-in Styles. A complete specification of the CC Mode style system, including how to create your own style, can be found in the chapter Styles. To set your style to linux, either customize c-default-style or put this into your .emacs:

	由 CC Mode 创建的基本形状，默认是 gnu 风格（除了 Java 和 AWK buffers）。从 Built-in Styles 中可以找到可用的风格和它们的描述的列表。CC Mode 风格系统的完整描述，包括如何创建自己的风格，可以 Styles 章节找到。将自己的风格设置为 linux，定制 c-default-style 或者将下面的代码写入.emacs 中：

	#+BEGIN_SRC elisp
(setq c-default-style '((java-mode . "java")
						(awk-mode . "awk")
						(other . "linux")))
	#+END_SRC
  + *Electric Indentation*

	Normally, when you type “punctuation” characters such as ‘;’ or ‘{’, CC Mode instantly reindents the current line. This can be disconcerting until you get used to it. To disable electric indentation in the current buffer, type C-c C-l. Type the same thing to enable it again. To have electric indentation disabled by default, put the following into your .emacs file[fn:2]:

	通常，当输入标点符号字符比如“；”或“{”，CC Mode 立即缩进当前行。直到使用之前不会关心它。输入 C-c C-l 在当前 buffer 中关闭自动缩进。相同输入 q 再次启用。默认关闭自动缩进，将下面的代码写入.emacs 文件：

	#+BEGIN_SRC elisp
(setq-default c-electric-flag nil)
	#+END_SRC

  	Details of this and other similar “Minor Modes” appear in the section Minor Modes.

	Minor Modes 章节中有此的详细信息和其他类似的“Minor Modes”。

  + Making the RET key indent the new line

	The standard Emacs binding for RET just adds a new line. If you want it to reindent the new line as well, rebind the key. Note that the action of rebinding would fail if the pertinent keymap didn’t yet exist—we thus need to delay the action until after CC Mode has been loaded. Put the following code into your .emacs:

	RET 的标准 Emacs 绑定只添加新行。如果想要重新缩进新行，需要重新绑定。注意如果相关的键映射不再存在，重新绑定将会失败。因而，我们需要延迟该操作，直到 CC Mode 已经加载了。将下面的代码写入.emacs 中：

	#+BEGIN_SRC elisp
(defun my-make-CR-do-indent ()
  (define-key c-mode-base-map "\C-m" 'c-context-line-break))
(add-hook 'c-initialization-hook 'my-make-CR-do-indent)
	#+END_SRC

  	This example demonstrates the use of a very powerful CC Mode (and Emacs) facility, the hook. The use of CC Mode’s hooks is described in CC Hooks.

	这个例子显示了 CC Mode 一个很强大的功能，就是钩子。CC Hooks 中描述了 CC Mode 钩子的使用。

  All these settings should occur in your .emacs before any CC Mode buffers get loaded—in particular, before any call of desktop-read.

  所有这些设置应该在加载 CC Mode buffer 之前发生，特别是在调用 desktop-read 之前。

  As you get to know the mode better, you may want to make more ambitious changes to your configuration. For this, you should start reading the chapter Config Basics.

  对模式有更多了解，可能想要对配置做更多的雄心勃勃的改变。对此，应该首先阅读 Config Basics 章。

  If you are upgrading an existing CC Mode installation, please see the README file for installation details. In particular, if you are going to be editing AWK files, README describes how to configure your (X)Emacs so that CC Mode will supersede the obsolete awk-mode.el which might have been supplied with your (X)Emacs. CC Mode might not work with older versions of Emacs or XEmacs. See the CC Mode release notes at http://cc-mode.sourceforge.net for the latest information on Emacs version and package compatibility (see Updating CC Mode).

  如果正在升级现有的 CC Mode，请阅读 README 文件了解安装细节。特别是，如果正在编辑 AWK 文件，READE 描述了如何配置(X)Emacs，这样 CC Mode 将取代由你的(X)Emacs 提供的过时的 awk-mode.el，CC Mode 不能与旧版本的 Emacs 或 XEmacs 一起使用。查看 http://cc-mode.sourceforge.net 上的发布信息了解有关 Emacs 版本和包兼容性的最新信息。

  + *Command: c-version*

	You can find out what version of CC Mode you are using by visiting a C file and entering M-x c-version RET. You should see this message in the echo area:

	当阅读 C 文件时，输入 M-x c-version RET 了解正在使用哪个版本的 CC Mode。在回显区应该看到这条信息

	#+BEGIN_EXAMPLE
Using CC Mode version 5.XX
	#+END_EXAMPLE

  where ‘XX’ is the minor release number.

  此处“XX”表示副发布版本号。

* Footnotes

[fn:2] There is no “easy customization” facility for making this change.
